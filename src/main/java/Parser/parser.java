package Parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import JFlex.MPLexer;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import java_cup.runtime.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\007\000\002\002\004\000\002\002" +
    "\007\000\002\002\006\000\002\002\005\000\002\002\004" +
    "\000\002\002\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\004\004\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\006\000\002\006" +
    "\006\000\002\006\005\000\002\006\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\013\002\000\002\007\011\000\002\010\006\000\002" +
    "\010\006\000\002\010\005\000\002\010\004\000\002\011" +
    "\005\000\002\011\005\000\002\014\002\000\002\011\011" +
    "\000\002\011\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\006\003\005\004\006\001\002\000\004\002" +
    "\101\001\002\000\004\002\ufffb\001\002\000\006\003\010" +
    "\005\007\001\002\000\006\003\012\006\011\001\002\000" +
    "\004\002\ufffc\001\002\000\006\003\015\010\014\001\002" +
    "\000\004\002\ufffd\001\002\000\006\003\077\007\100\001" +
    "\002\000\006\011\023\027\016\001\002\000\010\002\ufffe" +
    "\003\ufff8\007\ufff8\001\002\000\006\003\071\021\072\001" +
    "\002\000\012\003\ufff5\010\ufff5\011\ufff5\027\ufff5\001\002" +
    "\000\012\003\ufff4\010\ufff4\011\ufff4\027\ufff4\001\002\000" +
    "\012\003\ufff6\010\ufff6\011\ufff6\027\ufff6\001\002\000\012" +
    "\003\067\010\066\011\023\027\016\001\002\000\006\003" +
    "\024\012\025\001\002\000\012\003\ufff0\010\ufff0\011\ufff0" +
    "\027\ufff0\001\002\000\010\003\030\027\026\030\027\001" +
    "\002\000\040\003\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\001\002\000\040\003\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\001\002\000\012\003\ufff1\010\ufff1\011\ufff1\027" +
    "\ufff1\001\002\000\006\003\064\012\065\001\002\000\022" +
    "\013\036\014\034\015\035\016\037\017\042\023\040\024" +
    "\041\025\043\001\002\000\040\003\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\001\002" +
    "\000\006\027\026\030\027\001\002\000\006\027\026\030" +
    "\027\001\002\000\006\027\026\030\027\001\002\000\006" +
    "\027\026\030\027\001\002\000\006\027\026\030\027\001" +
    "\002\000\006\027\026\030\027\001\002\000\006\027\026" +
    "\030\027\001\002\000\006\027\026\030\027\001\002\000" +
    "\006\027\uffe3\030\uffe3\001\002\000\006\027\026\030\027" +
    "\001\002\000\012\023\040\024\041\025\043\026\047\001" +
    "\002\000\006\027\026\030\027\001\002\000\040\003\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\001\002\000\014\023\040\024\041\025\043\027" +
    "\uffeb\030\uffeb\001\002\000\006\027\026\030\027\001\002" +
    "\000\012\020\054\023\040\024\041\025\043\001\002\000" +
    "\006\027\026\030\027\001\002\000\014\003\uffea\012\uffea" +
    "\023\040\024\041\025\043\001\002\000\040\003\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\001\002\000\040\003\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000\014" +
    "\003\uffec\012\uffec\023\040\024\041\025\043\001\002\000" +
    "\014\003\uffef\012\uffef\023\040\024\041\025\043\001\002" +
    "\000\014\003\uffed\012\uffed\023\040\024\041\025\043\001" +
    "\002\000\014\003\uffee\012\uffee\023\040\024\041\025\043" +
    "\001\002\000\012\003\ufff2\010\ufff2\011\ufff2\027\ufff2\001" +
    "\002\000\012\003\ufff3\010\ufff3\011\ufff3\027\ufff3\001\002" +
    "\000\006\003\ufffa\007\ufffa\001\002\000\006\003\ufff9\007" +
    "\ufff9\001\002\000\012\003\ufff7\010\ufff7\011\ufff7\027\ufff7" +
    "\001\002\000\012\003\uffe6\010\uffe6\011\uffe6\027\uffe6\001" +
    "\002\000\010\003\073\027\026\030\027\001\002\000\012" +
    "\003\uffe7\010\uffe7\011\uffe7\027\uffe7\001\002\000\014\003" +
    "\076\022\075\023\040\024\041\025\043\001\002\000\012" +
    "\003\uffe9\010\uffe9\011\uffe9\027\uffe9\001\002\000\012\003" +
    "\uffe8\010\uffe8\011\uffe8\027\uffe8\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\021\005\020\006\016\010\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\067" +
    "\006\016\010\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\030\011\031\012\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\062" +
    "\012\032\001\001\000\006\011\061\012\032\001\001\000" +
    "\006\011\060\012\032\001\001\000\006\011\057\012\032" +
    "\001\001\000\004\012\056\001\001\000\004\012\055\001" +
    "\001\000\006\011\050\012\032\001\001\000\004\012\043" +
    "\001\001\000\004\014\044\001\001\000\006\011\045\012" +
    "\032\001\001\000\002\001\001\000\004\012\047\001\001" +
    "\000\002\001\001\000\004\013\051\001\001\000\006\011" +
    "\052\012\032\001\001\000\002\001\001\000\006\011\054" +
    "\012\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\073\012\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public int errNo = 0;

   public static void main( String[] args )
   {
      try
      {
           FileReader file = new FileReader( args[0] );
           Scanner scanner = new MPLexer( file );
           parser parser = new parser( scanner );
           parser.parse();

             if ( parser.errNo == 0 )
                         System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
             else
                         System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo );

      }
      catch( Exception e )
      {
          e.printStackTrace();
           System.out.println(e);
      }
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= START COL FS CodeBlock FE 
            {
              Object RESULT =null;
		

        System.out.println("Redukcija po smeni 1.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= START COL FS CodeBlock error 
            {
              Object RESULT =null;
		
        System.out.println("Greska, fali @@ na kraju programa.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= START COL FS error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali CodeBlock unutar programa.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= START COL error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali !! posle Start :");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= START error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali : posle Start");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Program ::= error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali Start na pocetku programa.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CodeBlock ::= CB MultiOrder CB 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 2.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CodeBlock",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CodeBlock ::= CB MultiOrder error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali ?? na kraju CodeBlock.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CodeBlock",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CodeBlock ::= error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali ?? na pocetku CodeBlock.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CodeBlock",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MultiOrder ::= MultiOrder Order 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 3.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiOrder",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MultiOrder ::= Order 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 4.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiOrder",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Order ::= IfStatement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 5.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Order",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Order ::= Assignment 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 6.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Order",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IfStatement ::= IF CS Comparison CS 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 7.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStatement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IfStatement ::= IF CS Comparison error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali $$ na kraju IfStatement.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStatement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IfStatement ::= IF CS error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali Comparison u IfStatement.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStatement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IfStatement ::= IF error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali $$ na pocetku IfStatement.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStatement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Comparison ::= Statement GT Statement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 8.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Comparison ::= Statement GTE Statement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 9.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Comparison ::= Statement LT Statement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 10.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Comparison ::= Statement LTE Statement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 11.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;

        System.out.println("Redukcija po smeni 12.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Comparison ::= Statement E Statement NT$0 Statement NE Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        System.out.println("Redukcija po smeni 13.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comparison",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assignment ::= ID ASSIGN Statement EOL 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 14.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assignment ::= ID ASSIGN Statement error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali ^^ na kraju Assignment.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Assignment ::= ID ASSIGN error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali Statement u Assignment.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Assignment ::= ID error 
            {
              Object RESULT =null;
		
        System.out.println("Greska fali = u Assignment.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= Statement PLUS EStatement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 15.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= Statement MINUS EStatement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 16.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$1 ::= 
            {
              Object RESULT =null;

        System.out.println("Redukcija po smeni 17.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= Statement MULTI EStatement NT$1 Statement DIV EStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        System.out.println("Redukcija po smeni 18.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= EStatement 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 19.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EStatement ::= ID 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 20.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EStatement ::= CONST 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 21.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
